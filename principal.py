import time 
import csv
import smtplib
import ssl
from email.message import EmailMessage
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from datetime import datetime
import os

# Configurar o Chrome para rodar no modo headless (sem abrir a interface gr√°fica)
chrome_options = Options()
chrome_options.add_argument("--headless")  # Ativa o modo headless

# Inicializar o driver do Chrome com as op√ß√µes configuradas
driver = webdriver.Chrome(options=chrome_options)

# Configura√ß√µes do e-mail
EMAIL_REMETENTE = "automacaomrc@gmail.com"  # Seu e-mail
SENHA = "cqle nafe dnmj mwll"  # Senha do e-mail ou app password (recomendado para Gmail)
EMAIL_DESTINATARIO = "mp243822@gmail.com"  # E-mail para receber o CSV

# Fun√ß√£o para capturar os dados de uma URL
def capturar_dados(url):
    driver.get(url)
    time.sleep(5)  # Aguarde o carregamento da p√°gina

    # Capturar os dados
    dados_produto = {"Link": url}  # Adiciona o link do produto
    
    try:
        # T√≠tulo do produto
        titulo_elemento = driver.find_element(By.CSS_SELECTOR, "h1.ui-pdp-title")
        dados_produto["T√≠tulo"] = titulo_elemento.text.strip()
    except:
        dados_produto["T√≠tulo"] = "N/A"

    try:
        # Pre√ßo com desconto
        preco_meta_elemento = driver.find_element(By.CSS_SELECTOR, 'meta[itemprop="price"]')
        dados_produto["Pre√ßo"] = float(preco_meta_elemento.get_attribute("content").replace(',', '.'))
    except:
        dados_produto["Pre√ßo"] = float('inf')  # Se n√£o tiver pre√ßo, define um valor alto
    
    # Adicionar a data e hora da pesquisa
    dados_produto["Data e Hora"] = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    
    return dados_produto

# Fun√ß√£o para ler os pre√ßos antigos de um arquivo CSV
def ler_precos_anteriores(arquivo):
    precos_anteriores = {}
    if os.path.exists(arquivo):
        with open(arquivo, mode="r", newline="", encoding="utf-8") as file:
            reader = csv.DictReader(file)
            for row in reader:
                # Armazenar os pre√ßos antigos usando o t√≠tulo como chave
                precos_anteriores[row["T√≠tulo"]] = float(row["Pre√ßo"])
    return precos_anteriores

# Fun√ß√£o para salvar os dados no CSV
def salvar_dados(produtos, arquivo):
    file_exists = os.path.exists(arquivo)

    with open(arquivo, mode="a", newline="", encoding="utf-8") as output_file:
        writer = csv.writer(output_file)

        # Se o arquivo n√£o existir, escreve o cabe√ßalho
        if not file_exists:
            writer.writerow(["T√≠tulo", "Pre√ßo", "Altera√ß√£o de Pre√ßo", "Data e Hora", "Link do Produto"])

        # Adicionar duas linhas vazias ap√≥s cada consulta de produto (n√£o entre as colunas)
        for produto in produtos:
            # Escrever os dados no CSV
            writer.writerow([produto["T√≠tulo"], produto["Pre√ßo"], produto["Altera√ß√£o de Pre√ßo"], produto["Data e Hora"], produto["Link"]])
        output_file.write("\n\n")

# Fun√ß√£o para enviar o e-mail com o CSV anexado e em formato de tabela HTML no corpo com responsividade e negrito
def enviar_email_com_tabela(produtos):
    msg = EmailMessage()
    msg["Subject"] = "Relat√≥rio de Pre√ßos - E-commerce Mercado Livre"
    msg["From"] = EMAIL_REMETENTE
    msg["To"] = EMAIL_DESTINATARIO
    msg.set_content("Segue abaixo o relat√≥rio de pre√ßos atualizado.")

    # Criando a tabela HTML com CSS responsivo e negrito nas linhas
    html_content = """
    <html>
    <head>
        <style>
            /* Estilo para a tabela */
            table {
                width: 100%;
                border-collapse: collapse;
                margin: 20px 0;
            }
            th, td {
                padding: 8px;
                text-align: left;
                border: 1px solid #ddd;
            }
            th {
                background-color: #f2f2f2;
                font-weight: bold;
            }
            td {
                font-weight: bold; /* Adiciona negrito nas c√©lulas */
            }
            /* Estilo para o link */
            a {
                text-decoration: none;
                color: #0066cc;
            }
            /* Responsividade */
            @media screen and (max-width: 600px) {
                table {
                    width: 100%;
                    display: block;
                    overflow-x: auto;
                }
                th, td {
                    display: block;
                    width: 100%;
                }
                td {
                    text-align: right;
                    padding-left: 50%;
                    position: relative;
                }
                td::before {
                    content: attr(data-label);
                    position: absolute;
                    left: 10px;
                    font-weight: bold;
                }
            }
        </style>
    </head>
    <body>
        <h3>üìä Tabela de Pre√ßo dos produtos do E-commerce Mercado Livre üìä</h3>
        <table>
            <tr>
                <th>T√≠tulo</th>
                <th>Pre√ßo</th>
                <th>Altera√ß√£o de Pre√ßo</th>
                <th>Data e Hora</th>
                <th>Link do Produto</th>
            </tr>
    """
    
    for produto in produtos:
        html_content += f"""
            <tr>
                <td>{produto["T√≠tulo"]}</td>
                <td>{produto["Pre√ßo"]}</td>
                <td>{produto["Altera√ß√£o de Pre√ßo"]}</td>
                <td>{produto["Data e Hora"]}</td>
                <td><a href="{produto["Link"]}">Link</a></td>
            </tr>
        """
    
    html_content += """
        </table>
    </body>
    </html>
    """
    
    msg.add_alternative(html_content, subtype="html")


    # Enviar o e-mail via SMTP
    context = ssl.create_default_context()
    with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
        server.login(EMAIL_REMETENTE, SENHA)
        server.send_message(msg)

    print("üìß E-mail enviado com sucesso!")

# Ler URLs do arquivo CSV
csv_input_filename = "urls_produtos.csv"  # Nome do arquivo CSV contendo as URLs
csv_output_filename = "dados_produtos.csv"  # Nome do arquivo CSV para salvar os dados

# Ler os pre√ßos antigos
precos_anteriores = ler_precos_anteriores(csv_output_filename)

produtos = []

with open(csv_input_filename, mode="r", newline="", encoding="utf-8") as input_file:
    reader = csv.reader(input_file)
    next(reader)  # Pular o cabe√ßalho, se houver

    # Iterar sobre as URLs e coletar os dados
    for row in reader:
        url = row[0]  # Assumindo que a URL est√° na primeira coluna
        print(f"üîéConsultando...")
        dados = capturar_dados(url)
        
        # Verificar se houve aumento ou diminui√ß√£o no pre√ßo
        alteracao_preco = "Sem Altera√ß√£o"
        cor = "black"
        if dados["T√≠tulo"] in precos_anteriores:
            diferenca = dados["Pre√ßo"] - precos_anteriores[dados["T√≠tulo"]]
            if diferenca > 0:
                alteracao_preco = f"Aumento de R${diferenca:.2f}"
                cor = "red"
            elif diferenca < 0:
                alteracao_preco = f"Diminui√ß√£o de R${-diferenca:.2f}"
                cor = "green"
        
       
        # Para o e-mail, inclui a formata√ß√£o HTML para a cor
        produto_html = {
            "T√≠tulo": dados["T√≠tulo"],
            "Pre√ßo": dados["Pre√ßo"],
            "Altera√ß√£o de Pre√ßo": f'<span style="color:{cor}; font-weight:bold;">{alteracao_preco}</span>',
            "Data e Hora": dados["Data e Hora"],
            "Link": dados["Link"]
        }
        dados["Altera√ß√£o de Pre√ßo"] = alteracao_preco
        produtos.append(produto_html)

# Ordenar os produtos por pre√ßo (do menor para o maior)
produtos_sorted = sorted(produtos, key=lambda x: x["Pre√ßo"])

salvar_dados(produtos_sorted, csv_output_filename)
print(f"üìÇ Dados salvos em {csv_output_filename}")

driver.quit()

# Perguntar ao usu√°rio se deseja enviar o e-mail
enviar_email = input("üìß Deseja enviar o relat√≥rio por e-mail? (s/n): ").strip().lower()
if enviar_email == 's':
   enviar_email_com_tabela(produtos_sorted)
